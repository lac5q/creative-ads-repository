{"version":3,"file":"index.js","sources":["../src/connect.ts","../settings.js","../src/initialize.ts","../src/config.readonly.ts","../src/search.ts","../src/index.ts"],"sourcesContent":["import { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport express, { Request, Response } from 'express';\nimport { detect } from 'detect-port';\n\n/**\n * Similar to https://github.com/modelcontextprotocol/typescript-sdk/pull/197/files\n */\nclass TransportManager {\n    private transports: Map<string, SSEServerTransport>;\n\n    constructor() {\n        this.transports = new Map();\n    }\n\n    addTransport(transport: SSEServerTransport, res: Response): string {\n        const sessionId = transport.sessionId;\n        this.transports.set(sessionId, transport);\n        \n        // Set up cleanup when response ends\n        res.on('close', () => {\n            this.removeTransport(sessionId);\n        });\n        \n        return sessionId;\n    }\n\n    removeTransport(sessionId: string) {\n        if (this.transports.has(sessionId)) {\n            this.transports.delete(sessionId);\n        }\n    }\n\n    getTransport(sessionId: string): SSEServerTransport | undefined {\n        return this.transports.get(sessionId);\n    }\n\n    getAllTransports(): SSEServerTransport[] {\n        return Array.from(this.transports.values());\n    }\n}\n\nconst DEFAULT_PORT = 3001;\nexport async function connectServer(server: Server, useStdioTransport: boolean): Promise<express.Application | undefined> {\n    if (useStdioTransport) {\n        console.log('Connecting to MCP server over stdio');\n        const transport = new StdioServerTransport();\n        await server.connect(transport);\n        return;\n    }\n    const app = express();\n    const port = await detect(DEFAULT_PORT);\n    const transportManager = new TransportManager();\n\n    // Increase JSON payload limit to handle larger messages\n    app.use(express.json({ limit: '10mb' }));\n\n    app.get('/sse', async (req: Request, res: Response) => {\n        try {\n            // Set headers for SSE\n            res.setHeader('Content-Type', 'text/event-stream');\n            res.setHeader('Cache-Control', 'no-cache');\n            res.setHeader('Connection', 'keep-alive');\n            \n            const transport = new SSEServerTransport('/messages', res);\n            const sessionId = transportManager.addTransport(transport, res);\n            \n            await server.connect(transport);\n        } catch (error) {\n            console.error('Error establishing SSE connection:', error);\n            res.status(500).json({ error: 'Failed to establish SSE connection' });\n        }\n    });\n\n    app.post('/messages', async (req: Request, res: Response) => {\n        const connectionId = req.query.sessionId as string;\n        \n        console.log('Connection ID', connectionId);\n        if (!connectionId) {\n            res.status(400).json({ error: 'Missing connection ID param' });\n            return;\n        }\n\n        const transport = transportManager.getTransport(connectionId);\n        \n\n        if (transport) {\n            try {\n                await transport.handlePostMessage(req, res, req.body);\n            } catch (error) {\n                console.error('Error handling POST message for connectionId:', connectionId, error);\n                \n                // If there's a critical error, clean up the transport\n                if (error instanceof Error && error.message.includes('connection closed')) {\n                    transportManager.removeTransport(connectionId);\n                }\n            }\n        } else {\n            res.status(404).json({ error: 'Connection not found' });\n        }\n    });\n\n    app.listen(port, () => {\n        if(port !== DEFAULT_PORT) {\n            console.error(`Port ${DEFAULT_PORT} is already in use. MCP Server running on SSE at http://localhost:${port}`);\n        } else {\n            console.error(`MCP Server running on SSE at http://localhost:${port}`);\n        }\n    });\n\n    return app;\n} ","export const SERVER_NAME = '@amp-labs/mcp-docs-server';\nexport const SERVER_VERSION = '0.0.1';\n","import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { SERVER_NAME, SERVER_VERSION } from '../settings.js';\n\nexport function initialize(): McpServer {\n    console.error('Initializing MCP Server...');\n    const server = new McpServer({\n        name: SERVER_NAME,\n        version: SERVER_VERSION,\n    });\n    return server;\n} ","// read-only\nexport const SUBDOMAIN: string = 'ampersand-24eb5c1a';\nexport const SERVER_URL: string = 'https://leaves.mintlify.com'; ","import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { TrieveSDK, ChunkMetadata } from \"trieve-ts-sdk\";\nimport { z } from \"zod\";\nimport { SUBDOMAIN } from \"./config.readonly.js\";\nimport { SERVER_URL } from \"./config.readonly.js\";\n\ninterface SearchConfig {\n  trieveApiKey: string;\n  trieveDatasetId: string;\n  name: string;\n}\n\ninterface SearchResult {\n  title: string;\n  content: string;\n  link: string;\n}\n\nconst DEFAULT_BASE_URL = \"https://api.mintlifytrieve.com\";\n\n\nexport async function fetchSearchConfigurationAndOpenApi(\n  subdomain: string\n): Promise<SearchConfig> {\n  try {\n    const url = `${SERVER_URL}/api/mcp/config/${subdomain}`;\n    const response = await fetch(url, { method: \"GET\" });\n\n    if (!response.ok) {\n      let msg = \"\";\n      try {\n        const json = await response.json();\n        msg = json.error ?? String(response.status) + \" \" + response.statusText;\n      } catch {\n        msg = String(response.status) + \" \" + response.statusText;\n      }\n      throw new Error(`HTTP Error: ${msg}`);\n    }\n\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Response is not JSON\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(\"Failed to initialize: \" + error);\n  }\n}\n\nasync function search(\n  query: string,\n  config: SearchConfig\n): Promise<SearchResult[]> {\n  const trieve = new TrieveSDK({\n    apiKey: config.trieveApiKey,\n    datasetId: config.trieveDatasetId,\n    baseUrl: DEFAULT_BASE_URL,\n  });\n\n  const data = await trieve.autocomplete({\n    page_size: 10,\n    query,\n    search_type: \"fulltext\",\n    extend_results: true,\n    score_threshold: 1,\n  });\n\n  if (data.chunks === undefined || data.chunks.length === 0) {\n    throw new Error(\"No results found\");\n  }\n\n  return data.chunks.map((result) => {\n    const chunk = result.chunk as ChunkMetadata & {\n      metadata: { title: string };\n      chunk_html: string;\n      link: string;\n    };\n\n    return {\n      title: chunk.metadata.title,\n      content: chunk.chunk_html,\n      link: chunk.link,\n    };\n  });\n}\n\nexport async function createSearchTool(server: Server): Promise<void> {\n  const config = await fetchSearchConfigurationAndOpenApi(SUBDOMAIN);\n  // @ts-ignore\n  server.tool(\n    \"searchAmpersand\",\n    `Search across the Ampersand documentation to fetch relevant context for a given query related to integrations or using the Ampersand API or products.`,\n    {\n      query: z\n        .string()\n        .describe(\n          \"The query to search for. The query could be anything related to the Ampersand documentation or API integrations in general, including (but not limited to):\\n\" +\n          \"\\n    Code examples\\n\" +\n          \"\\n    API references\\n\" +\n          \"\\n    Concepts and explanations\\n\" +\n          \"\\n    Troubleshooting steps\\n\" +\n          \"\\n    Best practices\"\n        ),\n    },\n    async ({ query }: { query: string }) => {\n      const results = await search(query, config);\n      const content = results.map((result) => {\n        const { title, content, link } = result;\n        const text = `Title: ${title}\\nContent: ${content}\\nLink: ${link}`;\n        return {\n          type: \"text\" as const,\n          text,\n        };\n      });\n\n      return {\n        content,\n      };\n    }\n  );\n}\n","import { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { connectServer } from './connect';\nimport { initialize } from './initialize';\nimport { createSearchTool } from './search';\nimport express from 'express';\n\nconst args = process.argv.slice(2);\nconst useStdioTransport = args.includes('--transport') && args[args.indexOf('--transport') + 1] === 'stdio';\n\nasync function main(): Promise<express.Application | undefined> {\n    // @ts-ignore\n    const server = initialize() as Server;\n    await createSearchTool(server);\n    const app = connectServer(server, useStdioTransport);\n    return app;\n}\n\nlet mcpApp: Promise<express.Application | undefined> | null = null;\n\ntry {\n    mcpApp = main();\n} catch (error: any) {\n    console.error('Fatal error in trying to initialize MCP server: ', error);\n    process.exit(1);\n}\n\nexport { mcpApp };"],"names":["useStdioTransport","content"],"mappings":"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"}